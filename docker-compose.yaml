version: "3.8"

services:
  server:
    container_name: server
    build:
      context: ./server
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    networks:
      - api-harbor-network
    depends_on:
      - opensearch
      - mongodb
      - kibana
      - filebeat
      - temporal

  worker:
    container_name: worker
    build:
      context: ./worker
      dockerfile: Dockerfile
    ports:
      - "8000:8001"
    networks:
      - api-harbor-network
    depends_on:
      - opensearch
      - mongodb
      - kibana
      - filebeat
      - temporal

  opensearch:
    container_name: opensearch
    environment:
      - discovery.type=single-node
      - OPENSEARCH_JAVA_OPTS=-Xms256m -Xmx256m
      - cluster.routing.allocation.disk.threshold_enabled=true
      - cluster.routing.allocation.disk.watermark.low=512mb
      - cluster.routing.allocation.disk.watermark.high=256mb
      - cluster.routing.allocation.disk.watermark.flood_stage=128mb
      - plugins.security.disabled=true
    image: opensearchproject/opensearch:${OPENSEARCH_VERSION}
    ulimits:
      nofile:
        soft: 65536
        hard: 65536
    networks:
      - api-harbor-network
    expose:
      - "${OPENSEARCH_PORT}:9200"
    volumes:
      - /usr/share/opensearch/data

  kibana:
    restart: always
    image: opensearchproject/opensearch-dashboards:${OPENSEARCH_VERSION}
    environment:
      OPENSEARCH_HOSTS: '["https://opensearch:9200"]' # must be a string with no spaces when specified as an environment variable
      DISABLE_INSTALL_DEMO_CONFIG: "true"
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "1"
    volumes:
      - "./certs:/usr/share/opensearch-dashboards/config/certificates:ro"
      - "./opensearch/opensearch-dashboards.yml:/usr/share/opensearch-dashboards/config/opensearch_dashboards.yml"
    ports:
      - "${KIBANA_PORT}:5601"

  postgresql:
    container_name: postgresql
    environment:
      POSTGRES_PASSWORD: temporal
      POSTGRES_USER: temporal
    image: postgres:${POSTGRESQL_VERSION}
    networks:
      - api-harbor-network
    expose:
      - 5432
    volumes:
      - /var/lib/postgresql/data

  temporal:
    container_name: temporal
    depends_on:
      - postgresql
      - opensearch
    environment:
      - DB=postgresql
      - DB_PORT=5432
      - POSTGRES_USER=temporal
      - POSTGRES_PWD=temporal
      - POSTGRES_SEEDS=postgresql
      - DYNAMIC_CONFIG_FILE_PATH=config/dynamicconfig/development-sql.yaml
      - ENABLE_ES=true
      - ES_SEEDS=opensearch
      - ES_VERSION=v7
    image: temporalio/auto-setup:${TEMPORAL_VERSION}
    networks:
      - api-harbor-network
    ports:
      - 7233:7233
    labels:
      kompose.volume.type: configMap
    volumes:
      - ./dynamicconfig:/etc/temporal/config/dynamicconfig

  temporal-admin-tools:
    container_name: temporal-admin-tools
    depends_on:
      - temporal
    environment:
      - TEMPORAL_ADDRESS=temporal:7233
      - TEMPORAL_CLI_ADDRESS=temporal:7233
    image: temporalio/admin-tools:${TEMPORAL_VERSION}
    networks:
      - api-harbor-network
    stdin_open: true
    tty: true

  temporal-ui:
    container_name: temporal-ui
    depends_on:
      - temporal
    environment:
      - TEMPORAL_ADDRESS=temporal:7233
      - TEMPORAL_CORS_ORIGINS=http://localhost:3000
    image: temporalio/ui:${TEMPORAL_UI_VERSION}
    networks:
      - api-harbor-network
    ports:
      - 8080:8080

  # kibana:
  #   image: docker.elastic.co/kibana/kibana:${STACK_VERSION}
  #   environment:
  #     - ELASTICSEARCH_HOSTS=http://opensearch:${OPENSEARCH_PORT}
  #     - ELASTICSEARCH_USERNAME=${ELASTIC_USERNAME}
  #     - ELASTICSEARCH_PASSWORD=${ELASTIC_PASSWORD}
  #   ports:
  #     - "${KIBANA_PORT}:5601"
  #   depends_on:
  #     - opensearch

  filebeat:
    image: docker.elastic.co/beats/filebeat:${STACK_VERSION}
    volumes:
      - ./filebeat:/usr/share/filebeat/
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    depends_on:
      - opensearch
      - kibana

  mongodb:
    image: mongo:latest
    ports:
      - "${MONGO_PORT}:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password

  mongo-express:
    image: mongo-express
    ports:
      - "8081:8081"
    environment:
      ME_CONFIG_MONGODB_SERVER: mongodb
      ME_CONFIG_MONGODB_PORT: ${MONGO_PORT}
      ME_CONFIG_MONGODB_ADMINUSERNAME: admin
      ME_CONFIG_MONGODB_ADMINPASSWORD: password

  prometheus:
    image: prom/prometheus:v2.30.3
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus:/etc/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_SECURITY_ADMIN_USER=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - ./grafana:/var/lib/grafana
volumes:
  elasticsearch-data:
    driver: local

  kibana-data:
    driver: local

  prometheus_data:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: ./prometheus_data
  grafana_data:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: ./grafana_data
  filebeat_data:
  mongo_data:

networks:
  api-harbor-network:
    driver: bridge
    name: api-harbor-network
